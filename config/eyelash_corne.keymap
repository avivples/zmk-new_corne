#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/bt.h>
#define _BT_SEL_KEYS_                                                        \
    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/currency.dtsi"
#include "zmk-helpers/key-labels/eyelash42.h"

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

#define CLMK 0
#define QWERTY 1
#define NAV 2
#define NUMBER 3  
#define SYMBOL 4
#define FN 5  
#define GAMING 6
#define GAME_NUM 7
#define MISC 8  


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2   // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
// #include "leader.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUMBER 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUMBER>, <&sl NUMBER>;
              tapping-term-ms = <200>;)

/* Custom behaviors */

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
      bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
   tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
    tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Misc aliases. [TODO: clean up]
#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define DSK_PREV  &hmr LCTRL LG(LC(LEFT)) // Previous desktop.
#define DSK_NEXT  &hmr LALT LG(LC(RIGHT)) // Next     desktop.
#define PIN_WIN   &kp LG(LC(LS(Q)))       // Pin window across desktops.
#define PIN_APP   &kp LG(LC(LS(A)))       // Pin application across desktops.
#define DSK_MGR   &kp LA(GRAVE)           // Desktop manager.
#define VOL_DOWN  &hmr RSHFT C_VOL_DN

// Keymap

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        CLMK {
            display-name = "CLMK";
            bindings = <
&tog 1      &kp Q        &kp W        &kp F        &kp P         &kp B                             &kp UP                &kp J        &kp L            &kp U          &kp Y         &kp SQT     &mo 8
&kp ESC     &hml LGUI A  &hml LALT R  &hml RCTRL S &hml LSHIFT T &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp M        &hmr RSHIFT N    &hmr LCTRL E   &hmr LALT I   &hmr RGUI O &kp DEL
&caps_word  &kp Z        &kp X        &kp C        &kp D         &kp V      &kp SPACE              &kp DOWN              &kp K        &kp H            &comma_morph   &dot_morph    &qexcl      &tog 6
                                      MAGIC_SHIFT  &lt_spc 2 0   &lt 5 TAB                                               &lt 4 ENTER  &lt 3 BACKSPACE  MAGIC_SHIFT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        QWERTY {
            display-name = "QWERTY";
            bindings = <
&tog 0      &kp Q       &kp W       &kp E        &kp P         &kp T                             &kp UP                &kp Y        &kp U            &kp I        &kp O         &kp P               &lt 5 DEL
&kp ESC     &mt LGUI A  &mt LALT S  &mt RCTRL D  &mt LSHIFT F  &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &mt RSHIFT J     &mt LCTRL K  &mt LALT L    &mt RGUI SEMICOLON  &kp SINGLE_QUOTE
&caps_word  &kp Z       &mt RALT X  &kp C        &kp V         &kp B      &kp SPACE              &kp DOWN              &kp K        &kp H            &kp COMMA    &mt RALT DOT  &kp FSLH            &tog 6
                                    MAGIC_SHIFT  &lt_spc 2 0   &lt 5 TAB                                               &lt 4 ENTER  &lt 3 BACKSPACE  MAGIC_SHIFT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        NAV {
            bindings = <
&none     &bootloader  &mkp MCLK     &mkp RCLK      &mkp LCLK        &none                           &mmv MOVE_UP                     &kp C_AC_SAVE      &kp LS(INS)    &kp LC(INS)  &kp LS(DEL)  &bootloader   &none
&swapper  &sk LGUI     &sk LALT      &sk LCTRL      &sk LSHFT        &none           &mmv MOVE_LEFT  &mkp MCLK    &mmv MOVE_RIGHT     &kp LEFT           &kp DOWN       &kp UP       &kp RIGHT    &kp CAPSLOCK  &none
&none     &none        &kp LS(DEL)   &kp LS(INS)    &kp LC(INS)      &none  &none                    &mmv MOVE_DOWN                   &kp HOME           &kp PG_DN      &kp PG_UP    &kp END      &kp INS       &none
                                     &none      &none      &none                                                                      &kp C_AC_FIND  CANCEL  &none
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "NAV";
        };

        NUMBER {
            bindings = <
&none  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT                   &none         &none  &none      &none      &none     &none     &none
&none  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL           &none  &none  &none  &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH   &none           &none         &none  &none      &none      &kp RALT  &none     &none
                          &kp DOT  &kp N0  &kp MINUS                                &none  &none      &none
            >;

            label = "NUMBER";
            sensor-bindings = <&inc_dec_kp LC(Y) LC(Z)>;
        };

        SYMBOL {
            bindings = <
&none  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                  &none         &none  &none      &none      &none     &none     &none
&none  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &none  &none  &none  &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp TILDE       &kp EXCLAMATION  &kp AT                &kp HASH               &kp PIPE         &none           &none         &none  &none      &none      &kp RALT  &none     &none
                                        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                 &none  &none      &none
            >;

            label = "SYMBOL";
            sensor-bindings = <&inc_dec_kp LG(Y) LG(Z)>;
        };

        FN {
            bindings = <
&none  &kp F12  &kp F7  &kp F8             &kp F9     &kp SYSREQ                           &none         &none  &none      &none      &none     &none     &none
&none  &kp F11  &kp F4  &kp F5             &kp F6     &kp SCROLLLOCK                &none  &none  &none  &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2             &kp F3     &kp C_PAUSE     &kp C_MUTE           &none         &none  &none      &none      &kp RALT  &none     &none
                        &kp K_APPLICATION  &kp SPACE  &kp TAB                                            &none  &none      &none
            >;

            label = "FN";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        GAMING {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T                        &none         &kp Y    &kp U    &kp I      &kp O    &kp P     &none
&kp LSHFT  &kp A  &kp S  &kp D     &kp F      &kp G                 &none  &none  &none  &kp H    &kp J    &kp K      &kp L    &kp SEMI  &none
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V      &kp B        &none           &none         &kp N    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &tog 6
                         &kp LALT  &kp SPACE  &lt 7 ENTER                                &kp ESC  &kp DEL  &kp GRAVE
            >;

            label = "GAMING";
        };

        GAME_NUM {
            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3    &kp N4     &kp N5                     &none         &kp Y    &kp U    &kp I      &kp O    &kp P     &none
&kp LSHFT  &kp A   &kp S   &kp D     &kp F      &kp G               &none  &none  &none  &kp H    &kp J    &kp K      &kp L    &kp SEMI  &none
&kp LCTRL  &kp Z   &kp X   &kp C     &kp V      &kp B      &none           &none         &kp N    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &none
                           &kp LALT  &kp SPACE  &kp ENTER                                &kp ESC  &kp DEL  &kp GRAVE
            >;

            label = "GAME_NUM";
        };

        MISC {
            display-name = "MISC";
            bindings = <
&none  &bt BT_CLR       &out OUT_USB    &out OUT_BLE  &none         &none                                               &mmv MOVE_UP                     &none            &none            &none            &none            &none     &kp BSPC
&none  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                        &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&none  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &none         &none         &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                        &none         &none         &none                                                                                &kp INS          &kp DEL          &none
            >;

            sensor-bindings = <&rgb_encoder>;
            label = "MISC";
        };
    };
};
